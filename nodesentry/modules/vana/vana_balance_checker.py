#!/usr/bin/env python3

import requests
import yaml
import asyncio
import os
import json
import subprocess
from decimal import Decimal
from datetime import datetime

CONFIG_PATH = "/root/nodesentry/config.yaml"
MONITOR_DIR = "/root/nodesentry/modules/vana"
LAST_CHECK_PATH = f"{MONITOR_DIR}/.last_balance_check"
CHECK_INTERVAL_HOURS = 24
BALANCE_THRESHOLD = Decimal("5.0")

def load_config():
    with open(CONFIG_PATH, "r") as f:
        return yaml.safe_load(f)

def get_node_name(ip, node_map):
    return node_map.get(ip, ip)

def get_balance(address):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ Vana —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π curl"""
    try:
        print(f"–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ curl –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        cmd = f"/usr/bin/curl -s 'https://moksha.vanascan.io/api/v2/addresses/{address}'"
        
        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {cmd}")
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        result = os.popen(cmd).read()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç curl: {result[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not result.strip():
            print("–û—à–∏–±–∫–∞ API: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return Decimal("0")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            data = json.loads(result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è coin_balance
            if "coin_balance" not in data:
                print(f"–û—à–∏–±–∫–∞: –ø–æ–ª–µ 'coin_balance' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
                return Decimal("0")
                
            raw_balance = data.get("coin_balance", "0")
            balance = Decimal(raw_balance) / Decimal(10**18)
            print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {balance:.6f} VANA")
            return balance
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
            print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {result}")
            return Decimal("0")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return Decimal("0")

def send_telegram_alert(bot_token, chat_id, node_name, address, balance):
    message = f"""‚ö†Ô∏è NodeSentry: –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å

üß© –ù–æ–¥–∞: {node_name}
üîë –ê–¥—Ä–µ—Å:  `{address}`
üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.6f} VANA

üîó –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –∫—Ä–∞–Ω:
https://faucet.vana.org/"""

    print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:\n{message}")
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ CHAT_ID: {chat_id} —Å BOT_TOKEN: {bot_token[:5]}...")

    try:
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {"chat_id": chat_id, "text": message, "parse_mode": "Markdown"}
        
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ URL: {url}")
        print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        curl_cmd = f'curl -s -X POST "{url}" -d "chat_id={chat_id}" -d "text={message}" -d "parse_mode=Markdown"'
        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É curl: {curl_cmd[:100]}...")
        
        result = os.popen(curl_cmd).read()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result[:200]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            response_data = json.loads(result)
            if response_data.get("ok"):
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response_data}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç: {e}")
        
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")

def load_last_check():
    if not os.path.exists(LAST_CHECK_PATH):
        return None
    try:
        with open(LAST_CHECK_PATH, "r") as f:
            return datetime.fromisoformat(f.read().strip())
    except:
        return None

def save_last_check():
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(LAST_CHECK_PATH), exist_ok=True)
    
    with open(LAST_CHECK_PATH, "w") as f:
        f.write(datetime.now().isoformat())

async def main():
    try:
        print(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ Vana: {datetime.now()}")
        
        config = load_config()
        wallet = config.get("wallet_address")
        if not wallet:
            print("‚ö†Ô∏è Wallet address –Ω–µ –∑–∞–¥–∞–Ω –≤ config.yaml")
            return

        print(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {wallet}")
        
        ip = os.popen("hostname -I | awk '{print $1}'").read().strip()
        node_name = get_node_name(ip, config.get("node_map", {}))
        bot_token = config["telegram"]["bot_token"]
        chat_id = config["telegram"]["chat_id"]

        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: IP={ip}, –ù–æ–¥–∞={node_name}, CHAT_ID={chat_id}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        print("–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
        try:
            balance = get_balance(wallet)
            print(f"[{datetime.now()}] –ë–∞–ª–∞–Ω—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {balance:.6f} VANA")

            if balance <= BALANCE_THRESHOLD:
                print(f"–ë–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ({BALANCE_THRESHOLD} VANA), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç")
                send_telegram_alert(bot_token, chat_id, node_name, wallet, balance)
            else:
                print(f"–ë–∞–ª–∞–Ω—Å –≤ –Ω–æ—Ä–º–µ ({balance:.6f} VANA), –ø–æ—Ä–æ–≥: {BALANCE_THRESHOLD} VANA")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        save_last_check()
        
        while True:
            try:
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now()}")
                last = load_last_check()
                now = datetime.now()

                if last:
                    seconds_since_last = (now - last).total_seconds()
                    print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last}, –ø—Ä–æ—à–ª–æ {seconds_since_last} —Å–µ–∫—É–Ω–¥ –∏–∑ {CHECK_INTERVAL_HOURS * 3600} –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö")
                else:
                    print("–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –Ω–µ –±—ã–ª–æ)")
                
                if not last or (now - last).total_seconds() >= CHECK_INTERVAL_HOURS * 3600:
                    print(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {wallet}")
                    
                    try:
                        balance = get_balance(wallet)
                        print(f"[{now}] –ë–∞–ª–∞–Ω—Å: {balance:.6f} VANA")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –ø–æ—Ä–æ–≥—É
                        if balance <= BALANCE_THRESHOLD:
                            print(f"–ë–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ({BALANCE_THRESHOLD} VANA), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç")
                            send_telegram_alert(bot_token, chat_id, node_name, wallet, balance)
                        else:
                            print(f"–ë–∞–ª–∞–Ω—Å –≤ –Ω–æ—Ä–º–µ ({balance:.6f} VANA), –ø–æ—Ä–æ–≥: {BALANCE_THRESHOLD} VANA")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
                        error_message = f"""‚ö†Ô∏è NodeSentry: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞

üß© –ù–æ–¥–∞: {node_name}
üîë –ê–¥—Ä–µ—Å: `{wallet}`
‚ùå –û—à–∏–±–∫–∞: {str(e)}

üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é:
https://moksha.vanascan.io/address/{wallet}"""
                        
                        try:
                            requests.post(
                                f"https://api.telegram.org/bot{bot_token}/sendMessage",
                                data={"chat_id": chat_id, "text": error_message, "parse_mode": "Markdown"}
                            )
                        except Exception as e2:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e2}")

                    print("–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    save_last_check()
                else:
                    print(f"–ï—â–µ –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∂–¥–µ–º {CHECK_INTERVAL_HOURS} —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")

                print(f"–û–∂–∏–¥–∞–Ω–∏–µ 1 —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏")
                await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å (–≤–¥—Ä—É–≥ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    asyncio.run(main())