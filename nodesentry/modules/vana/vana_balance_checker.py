#!/usr/bin/env python3

import requests
import yaml
import asyncio
import os
from decimal import Decimal
from datetime import datetime

CONFIG_PATH = "/root/nodesentry/config.yaml"
MONITOR_DIR = "/root/nodesentry/modules/vana"
LAST_CHECK_PATH = f"{MONITOR_DIR}/.last_balance_check"
CHECK_INTERVAL_HOURS = 24
BALANCE_THRESHOLD = Decimal("5.0")

def load_config():
    with open(CONFIG_PATH, "r") as f:
        return yaml.safe_load(f)

def get_node_name(ip, node_map):
    return node_map.get(ip, ip)

def get_balance(address):
    url = f"https://moksha.vanascan.io/api/v2/addresses/{address}"
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36",
        "Accept": "*/*",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Referer": f"https://moksha.vanascan.io/address/{address}",
        "Origin": "https://moksha.vanascan.io",
        "authority": "moksha.vanascan.io",
        "sec-ch-ua": '"Google Chrome";v="135", "Not-A.Brand";v="8", "Chromium";v="135"',
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": '"macOS"',
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-origin"
    }
    
    # –ö—É–∫–∏ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    cookies = {
        "chakra-ui-color-mode": "light",
        "chakra-ui-color-mode-hex": "#FFFFFF",
        "indexing_alert": "false",
        "address_format": "base16"
    }
    
    try:
        print(f"–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
        response = requests.get(url, headers=headers, cookies=cookies)
        print(f"API –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status_code}, —Ç–µ–∫—Å—Ç: {response.text[:100]}")
            return Decimal("0")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not response.text.strip():
            print("–û—à–∏–±–∫–∞ API: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return Decimal("0")
            
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"–û—Ç–≤–µ—Ç API (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {response.text[:200]}")
            
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è coin_balance
        if "coin_balance" not in data:
            print(f"–û—à–∏–±–∫–∞: –ø–æ–ª–µ 'coin_balance' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text}")
            return Decimal("0")
            
        raw = data.get("coin_balance", "0")
        balance = Decimal(raw) / Decimal(10**18)
        print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {balance} VANA (raw: {raw})")
        return balance
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return Decimal("0")
    except (ValueError, requests.exceptions.JSONDecodeError) as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}")
        return Decimal("0")
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return Decimal("0")

def send_telegram_alert(bot_token, chat_id, node_name, address, balance):
    message = f"""‚ö†Ô∏è NodeSentry: –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å

üß© –ù–æ–¥–∞: {node_name}
üîë –ê–¥—Ä–µ—Å:  `{address}`
üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} VANA

üîó –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –∫—Ä–∞–Ω:
https://faucet.vana.org/"""

    try:
        requests.post(
            f"https://api.telegram.org/bot{bot_token}/sendMessage",
            data={"chat_id": chat_id, "text": message, "parse_mode": "Markdown"}
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram:", e)

def load_last_check():
    if not os.path.exists(LAST_CHECK_PATH):
        return None
    try:
        with open(LAST_CHECK_PATH, "r") as f:
            return datetime.fromisoformat(f.read().strip())
    except:
        return None

def save_last_check():
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(LAST_CHECK_PATH), exist_ok=True)
    
    with open(LAST_CHECK_PATH, "w") as f:
        f.write(datetime.now().isoformat())

async def main():
    config = load_config()
    wallet = config.get("wallet_address")
    if not wallet:
        print("‚ö†Ô∏è Wallet address –Ω–µ –∑–∞–¥–∞–Ω –≤ config.yaml")
        return

    ip = os.popen("hostname -I | awk '{print $1}'").read().strip()
    node_name = get_node_name(ip, config.get("node_map", {}))
    bot_token = config["telegram"]["bot_token"]
    chat_id = config["telegram"]["chat_id"]

    while True:
        last = load_last_check()
        now = datetime.now()

        if not last or (now - last).total_seconds() >= CHECK_INTERVAL_HOURS * 3600:
            try:
                balance = get_balance(wallet)
                print(f"[{now}] –ë–∞–ª–∞–Ω—Å: {balance:.2f} VANA")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –∏–ª–∏ —Ä–∞–≤–µ–Ω 0 (–≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ API)
                if balance <= BALANCE_THRESHOLD:
                    print(f"–ë–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ({BALANCE_THRESHOLD} VANA), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç")
                    send_telegram_alert(bot_token, chat_id, node_name, wallet, balance)
                else:
                    print(f"–ë–∞–ª–∞–Ω—Å –≤ –Ω–æ—Ä–º–µ ({balance:.2f} VANA), –ø–æ—Ä–æ–≥: {BALANCE_THRESHOLD} VANA")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
                error_message = f"""‚ö†Ô∏è NodeSentry: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞

üß© –ù–æ–¥–∞: {node_name}
üîë –ê–¥—Ä–µ—Å: `{wallet}`
‚ùå –û—à–∏–±–∫–∞: {str(e)}

üîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é:
https://moksha.vanascan.io/address/{wallet}"""
                
                try:
                    requests.post(
                        f"https://api.telegram.org/bot{bot_token}/sendMessage",
                        data={"chat_id": chat_id, "text": error_message, "parse_mode": "Markdown"}
                    )
                except Exception as e2:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e2}")

            save_last_check()

        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å (–≤–¥—Ä—É–≥ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω)
        
if __name__ == "__main__":
    asyncio.run(main())